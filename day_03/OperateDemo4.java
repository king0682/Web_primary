class OperateDemo4
{
    public static void main(String[] args)
    {
        //<<左移两位乘2^2，左移几位就是几次幂，作用：只方便关于2的倍数的乘法，运算速度快。
        System.out.println(6<<2);

        //>>右移除几个2，右移是整数，原最高位是什么，最高位补什么(负数最高位补1，正数最高位补0)

        /*>>>无符号右移，无论原最高位是1或者是0，最高位都补0，
        用法：当需要将一串数字取八进制/十六进制时，每右移三位一取，最后结果就是八进制，最高位一直补充0*/

        //无符号右移：遇到2的次幂的乘除运算，先想到位移，想操作一段二进制位，用无符号右移

        //与：用来取二进制数中想要的数，获取有效的1(想取后三位，就与00000111)，如果想取00101011中的101的话，则用>>>向右移动三位

        //异或：一个数异或两次另一个数时，结果还是本身，6^3^3=6(音乐加密：每个字节都异或3一次，解密：再异或3一次)

        //取反：-6 = ~6+1  0110 ~ 1001(-7)[减1取反是0111，结果为7，那么原来的数是-7]
    }
}